console.log('üöÄ D√âBUT app.js - Version Aave uniquement');

// ===== CONTRACT CONFIGURATION =====
var POLYGON_CHAIN_ID = 137;

// Tokens Polygon - CORRECTION DES ADRESSES USDC
var POLYGON_TOKENS = {
    WETH: "0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619",
    USDC: "0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359", // USDC Native (nouvelle adresse)
    USDC_BRIDGED: "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174", // USDC.e (ancienne)
    WMATIC: "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270",
    WBTC: "0x1BFD67037B42Cf73acF2047067bd4F2C47D9BfD6"
};

// Configuration Aave V3 sur Polygon - CORRECTION ADRESSES
const AAVE_V3_POLYGON = {
    POOL: "0x794a61358D6845594F94dc1DB02A252b5b4814aD",
    PRICE_ORACLE: "0xb023e699F5a33916Ea823A16485e259257cA8Bd1",
    // Tokens support√©s avec TOUTES les variantes USDC
    ASSETS: {
        WETH: {
            address: "0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619",
            aToken: "0xe50fA9b3c56FfB159cB0FCA61F5c9D750e8128c8",
            decimals: 18,
            symbol: "WETH"
        },
        USDC: {
            address: "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174", // USDC.e (plus largement support√©)
            aToken: "0x625E7708f30cA75bfd92586e17077590C60eb4cD",
            decimals: 6,
            symbol: "USDC"
        },
        USDC_NATIVE: {
            address: "0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359", // USDC Native
            aToken: "0x625E7708f30cA75bfd92586e17077590C60eb4cD", // M√™me aToken pour l'instant
            decimals: 6,
            symbol: "USDC"
        },
        WMATIC: {
            address: "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270",
            aToken: "0x6d80113e533a2C0fe82EaBD35f1875DcEA89Ea97",
            decimals: 18,
            symbol: "WMATIC"
        },
        WBTC: {
            address: "0x1BFD67037B42Cf73acF2047067bd4F2C47D9BfD6",
            aToken: "0x078f358208685046a11C85e8ad32895DED33A249",
            decimals: 8,
            symbol: "WBTC"
        }
    }
};

// ABI ERC20 pour v√©rifier les soldes
const ERC20_ABI = [
    "function balanceOf(address account) view returns (uint256)",
    "function approve(address spender, uint256 amount) returns (bool)",
    "function allowance(address owner, address spender) view returns (uint256)",
    "function decimals() view returns (uint8)",
    "function symbol() view returns (string)"
];

// ===== GLOBAL STATE MANAGEMENT =====
class YieldMaxApp {
    constructor() {
        this.walletConnected = false;
        this.currentAccount = null;
        this.currentNetwork = 'polygon';
        this.activeStrategy = 'aave';
        this.positions = [];
        this.tokenBalances = {}; // Cache des soldes
        
        this.init();
        console.log('YieldMaxApp initialized');
    }

    init() {
        this.setupEventListeners();
        this.updateUI();
    }

    // ===== WALLET CONNECTION =====
    async connectWallet() {
        try {
            if (typeof window.ethereum !== 'undefined') {
                const accounts = await window.ethereum.request({
                    method: 'eth_requestAccounts'
                });
                
                this.currentAccount = accounts[0];
                this.walletConnected = true;
                
                // Update UI
                this.updateWalletUI();
                
                // Charger les soldes des tokens
                await this.loadTokenBalances();
                
                console.log('Wallet connected:', this.currentAccount);
            } else {
                alert('MetaMask non d√©tect√©. Veuillez installer MetaMask.');
            }
        } catch (error) {
            console.error('Erreur de connexion wallet:', error);
            alert('Erreur lors de la connexion au wallet');
        }
    }

    updateWalletUI() {
        const walletBtn = document.getElementById('connectWallet');
        if (this.walletConnected) {
            walletBtn.innerHTML = `
                <i class="fas fa-check-circle"></i>
                ${this.currentAccount.slice(0, 6)}...${this.currentAccount.slice(-4)}
            `;
            walletBtn.classList.add('connected');
        }
    }

    // ===== GESTION DES SOLDES =====
    async loadTokenBalances() {
        if (!this.walletConnected) return;

        try {
            const provider = new ethers.BrowserProvider(window.ethereum);
            
            console.log('üîç Chargement des soldes des tokens...');
            
            // Afficher le loader dans l'interface
            const balanceDisplay = document.getElementById('aaveBalanceDisplay');
            if (balanceDisplay) {
                balanceDisplay.innerHTML = `
                    <span class="balance-label">Solde disponible:</span>
                    <span class="balance-value balance-loading">Chargement...</span>
                `;
            }
            
            // Charger le solde MATIC natif (token natif de Polygon)
            const nativeBalance = await provider.getBalance(this.currentAccount);
            this.tokenBalances.NATIVE = ethers.formatEther(nativeBalance);
            
            console.log(`üí∞ MATIC Natif: ${this.tokenBalances.NATIVE}`);
            
            // Charger les soldes des tokens ERC20 avec gestion d'erreur robuste
            for (const [key, asset] of Object.entries(AAVE_V3_POLYGON.ASSETS)) {
                try {
                    const tokenContract = new ethers.Contract(asset.address, ERC20_ABI, provider);
                    const balance = await tokenContract.balanceOf(this.currentAccount);
                    const formattedBalance = ethers.formatUnits(balance, asset.decimals);
                    this.tokenBalances[key] = formattedBalance;
                    
                    console.log(`üí∞ ${asset.symbol}: ${formattedBalance}`);
                    
                    // Petit d√©lai pour √©viter les rate limits
                    await new Promise(resolve => setTimeout(resolve, 100));
                } catch (error) {
                    console.error(`‚ùå Erreur chargement solde ${asset.symbol}:`, error);
                    this.tokenBalances[key] = "0.0";
                }
            }
            
            // V√©rifier aussi USDC Native s√©par√©ment (nouvelle adresse Polygon)
            try {
                const usdcNativeContract = new ethers.Contract(POLYGON_TOKENS.USDC, ERC20_ABI, provider);
                const usdcNativeBalance = await usdcNativeContract.balanceOf(this.currentAccount);
                const formattedUsdcNative = ethers.formatUnits(usdcNativeBalance, 6);
                this.tokenBalances.USDC_NATIVE = formattedUsdcNative;
                
                console.log(`üí∞ USDC Native: ${formattedUsdcNative}`);
            } catch (error) {
                console.error('‚ùå Erreur chargement USDC Native:', error);
                this.tokenBalances.USDC_NATIVE = "0.0";
            }
            
            console.log('‚úÖ Tous les soldes charg√©s:', this.tokenBalances);
            
            // Mettre √† jour l'affichage du solde
            this.updateBalanceDisplay();
            
            // Notification de succ√®s
            this.showNotification('üí∞ Soldes mis √† jour avec succ√®s', 'success');
            
        } catch (error) {
            console.error('‚ùå Erreur lors du chargement des soldes:', error);
            this.showNotification('‚ùå Erreur lors du chargement des soldes', 'error');
            
            // En cas d'erreur, afficher un message d'erreur dans l'interface
            const balanceDisplay = document.getElementById('aaveBalanceDisplay');
            if (balanceDisplay) {
                balanceDisplay.innerHTML = `
                    <span class="balance-label">Solde disponible:</span>
                    <span class="balance-value balance-zero">Erreur de chargement</span>
                    <span class="balance-warning">
                        <i class="fas fa-exclamation-triangle"></i>
                        Cliquez sur "Connecter Wallet" pour r√©essayer
                    </span>
                `;
            }
        }
    }

    // Fonction pour obtenir le meilleur solde USDC disponible
    getBestUSDCBalance() {
        const usdcBalance = parseFloat(this.tokenBalances.USDC || "0");
        const usdcNativeBalance = parseFloat(this.tokenBalances.USDC_NATIVE || "0");
        
        console.log('üîç Comparaison soldes USDC:');
        console.log(`USDC.e: ${usdcBalance}`);
        console.log(`USDC Native: ${usdcNativeBalance}`);
        
        if (usdcNativeBalance > 0) {
            return { balance: usdcNativeBalance, type: 'NATIVE', address: POLYGON_TOKENS.USDC };
        } else if (usdcBalance > 0) {
            return { balance: usdcBalance, type: 'BRIDGED', address: AAVE_V3_POLYGON.ASSETS.USDC.address };
        } else {
            return { balance: 0, type: 'NONE', address: null };
        }
    }

    updateBalanceDisplay() {
        const selectedAsset = document.getElementById('aaveAssetSelect')?.value || 'weth';
        const balanceElement = document.getElementById('aaveBalanceDisplay');
        
        if (!balanceElement) return;
        
        let balance = 0;
        let symbol = '';
        let balanceType = '';
        
        // Logique corrig√©e pour chaque asset
        if (selectedAsset === 'usdc') {
            const usdcInfo = this.getBestUSDCBalance();
            balance = usdcInfo.balance;
            symbol = 'USDC';
            balanceType = usdcInfo.type === 'NATIVE' ? '(USDC Native)' : 
                         usdcInfo.type === 'BRIDGED' ? '(USDC.e)' : '';
            
            if (usdcInfo.balance > 0) {
                balanceElement.innerHTML = `
                    <span class="balance-label">Solde disponible:</span>
                    <span class="balance-value">${balance.toFixed(6)} ${symbol}</span>
                    <span class="balance-type">${balanceType}</span>
                `;
            } else {
                balanceElement.innerHTML = `
                    <span class="balance-label">Solde disponible:</span>
                    <span class="balance-value balance-zero">0.000000 ${symbol}</span>
                    <span class="balance-warning">
                        <i class="fas fa-exclamation-triangle"></i>
                        Aucun USDC trouv√©
                    </span>
                `;
            }
        } else if (selectedAsset === 'weth') {
            // Pour WETH, utiliser le solde WETH r√©el (token ERC20)
            balance = parseFloat(this.tokenBalances.WETH || "0");
            symbol = 'WETH';
            
            if (balance > 0) {
                balanceElement.innerHTML = `
                    <span class="balance-label">Solde disponible:</span>
                    <span class="balance-value">${balance.toFixed(6)} ${symbol}</span>
                    <span class="balance-type">(Token ERC20)</span>
                `;
            } else {
                // Si pas de WETH, informer sur MATIC disponible
                const maticBalance = parseFloat(this.tokenBalances.NATIVE || "0");
                balanceElement.innerHTML = `
                    <span class="balance-label">Solde disponible:</span>
                    <span class="balance-value balance-zero">0.000000 ${symbol}</span>
                    <div class="balance-warning">
                        <i class="fas fa-info-circle"></i>
                        ${maticBalance > 0 ? 
                          `Vous avez ${maticBalance.toFixed(4)} MATIC. Convertissez en WETH d'abord.` : 
                          'Aucun WETH trouv√©. Convertissez du MATIC ou transf√©rez du WETH.'}
                    </div>
                `;
            }
        } else if (selectedAsset === 'wmatic') {
            // Pour WMATIC, utiliser le solde WMATIC token
            balance = parseFloat(this.tokenBalances.WMATIC || "0");
            const nativeBalance = parseFloat(this.tokenBalances.NATIVE || "0");
            symbol = 'WMATIC';
            
            if (balance > 0) {
                balanceElement.innerHTML = `
                    <span class="balance-label">Solde disponible:</span>
                    <span class="balance-value">${balance.toFixed(6)} ${symbol}</span>
                    <span class="balance-type">(Token ERC20)</span>
                `;
            } else if (nativeBalance > 0) {
                balanceElement.innerHTML = `
                    <span class="balance-label">Solde disponible:</span>
                    <span class="balance-value balance-zero">0.000000 ${symbol}</span>
                    <div class="balance-warning">
                        <i class="fas fa-info-circle"></i>
                        Vous avez ${nativeBalance.toFixed(4)} MATIC natif. Convertissez en WMATIC d'abord.
                    </div>
                `;
            } else {
                balanceElement.innerHTML = `
                    <span class="balance-label">Solde disponible:</span>
                    <span class="balance-value balance-zero">0.000000 ${symbol}</span>
                `;
            }
        } else {
            // Autres tokens (WBTC, etc.)
            balance = parseFloat(this.tokenBalances[selectedAsset.toUpperCase()] || "0");
            symbol = AAVE_V3_POLYGON.ASSETS[selectedAsset.toUpperCase()]?.symbol || selectedAsset.toUpperCase();
            
            balanceElement.innerHTML = `
                <span class="balance-label">Solde disponible:</span>
                <span class="balance-value ${balance === 0 ? 'balance-zero' : ''}">${balance.toFixed(8)} ${symbol}</span>
                <span class="balance-type">(Token ERC20)</span>
            `;
        }
        
        // D√©clencher la validation apr√®s mise √† jour du solde
        this.validateAaveForm();
    }

    validateAaveForm() {
        const amount = parseFloat(document.getElementById('aaveAmount')?.value || "0");
        const selectedAsset = document.getElementById('aaveAssetSelect')?.value || 'weth';
        const depositBtn = document.getElementById('aaveDepositBtn');
        const errorElement = document.getElementById('aaveBalanceError');
        
        if (!depositBtn || !errorElement) return;
        
        let availableBalance = 0;
        let warningMessage = '';
        let canDeposit = false;
        
        // D√©terminer le solde disponible selon l'asset s√©lectionn√©
        if (selectedAsset === 'usdc') {
            const usdcInfo = this.getBestUSDCBalance();
            availableBalance = usdcInfo.balance;
            canDeposit = availableBalance > 0;
        } else if (selectedAsset === 'weth') {
            // Pour WETH, utiliser le solde WETH r√©el, pas MATIC
            availableBalance = parseFloat(this.tokenBalances.WETH || "0");
            canDeposit = availableBalance > 0;
            
            if (availableBalance === 0) {
                const maticBalance = parseFloat(this.tokenBalances.NATIVE || "0");
                if (maticBalance > 0) {
                    warningMessage = `Vous devez d'abord convertir vos ${maticBalance.toFixed(4)} MATIC en WETH`;
                } else {
                    warningMessage = `Vous n'avez pas de WETH. Transf√©rez du WETH ou convertissez du MATIC`;
                }
            }
        } else if (selectedAsset === 'wmatic') {
            // Pour WMATIC, utiliser le solde WMATIC token
            availableBalance = parseFloat(this.tokenBalances.WMATIC || "0");
            canDeposit = availableBalance > 0;
            
            if (availableBalance === 0) {
                const nativeBalance = parseFloat(this.tokenBalances.NATIVE || "0");
                if (nativeBalance > 0) {
                    warningMessage = `Vous devez d'abord convertir vos ${nativeBalance.toFixed(4)} MATIC en WMATIC`;
                } else {
                    warningMessage = `Vous n'avez pas de WMATIC. Transf√©rez du WMATIC ou convertissez du MATIC`;
                }
            }
        } else {
            // Autres tokens (WBTC, etc.)
            availableBalance = parseFloat(this.tokenBalances[selectedAsset.toUpperCase()] || "0");
            canDeposit = availableBalance > 0;
            
            if (availableBalance === 0) {
                warningMessage = `Vous n'avez pas de ${selectedAsset.toUpperCase()}. Transf√©rez des tokens vers votre wallet`;
            }
        }
        
        // Logique de validation
        if (amount > 0 && amount > availableBalance) {
            // Montant sup√©rieur au solde disponible
            depositBtn.disabled = true;
            depositBtn.innerHTML = `
                <i class="fas fa-exclamation-triangle"></i>
                Solde Insuffisant
            `;
            depositBtn.classList.add('disabled');
            
            const errorMsg = `Solde insuffisant. Vous avez ${availableBalance.toFixed(6)} ${selectedAsset.toUpperCase()}, mais vous voulez d√©poser ${amount.toFixed(6)}`;
            
            errorElement.innerHTML = `
                <i class="fas fa-exclamation-triangle"></i>
                <span>${errorMsg}</span>
            `;
            errorElement.classList.add('show');
            
        } else if (amount > 0 && !canDeposit) {
            // Pas de solde du tout pour cet asset
            depositBtn.disabled = true;
            depositBtn.innerHTML = `
                <i class="fas fa-exchange-alt"></i>
                Conversion Requise
            `;
            depositBtn.classList.add('disabled');
            
            errorElement.innerHTML = `
                <i class="fas fa-info-circle"></i>
                <span>${warningMessage}</span>
            `;
            errorElement.classList.add('show');
            
        } else if (amount > 0 && canDeposit) {
            // Montant valide et solde suffisant
            depositBtn.disabled = false;
            depositBtn.innerHTML = `
                <i class="fas fa-plus-circle"></i>
                D√©poser ${amount.toFixed(4)} ${selectedAsset.toUpperCase()}
            `;
            depositBtn.classList.remove('disabled');
            errorElement.classList.remove('show');
            
        } else if (amount <= 0 && canDeposit) {
            // Pas de montant mais solde disponible
            depositBtn.disabled = false;
            depositBtn.innerHTML = `
                <i class="fas fa-plus-circle"></i>
                D√©poser sur Aave
            `;
            depositBtn.classList.remove('disabled');
            errorElement.classList.remove('show');
            
        } else {
            // Pas de montant et pas de solde
            depositBtn.disabled = true;
            depositBtn.innerHTML = `
                <i class="fas fa-wallet"></i>
                Aucun Solde Disponible
            `;
            depositBtn.classList.add('disabled');
            
            if (warningMessage) {
                errorElement.innerHTML = `
                    <i class="fas fa-info-circle"></i>
                    <span>${warningMessage}</span>
                `;
                errorElement.classList.add('show');
            } else {
                errorElement.classList.remove('show');
            }
        }
    }

    // ===== FONCTION POUR RAFRA√éCHIR LES SOLDES MANUELLEMENT =====
    async refreshBalances() {
        if (!this.walletConnected) {
            this.showNotification('Veuillez d\'abord connecter votre wallet', 'warning');
            return;
        }
        
        this.showNotification('üîÑ Actualisation des soldes...', 'info');
        await this.loadTokenBalances();
    }

    // ===== STRATEGY MANAGEMENT =====
    switchStrategy(strategyName) {
        console.log('üîÑ Changement de strat√©gie vers:', strategyName);
        
        // Masquer tous les contenus de strat√©gie
        document.querySelectorAll('.strategy-content').forEach(content => {
            content.classList.remove('active');
        });

        // Supprimer la classe active de tous les onglets
        document.querySelectorAll('.tab-btn').forEach(tab => {
            tab.classList.remove('active');
        });

        // Afficher la strat√©gie s√©lectionn√©e
        document.getElementById(`${strategyName}-strategy`).classList.add('active');
        document.querySelector(`[data-strategy="${strategyName}"]`).classList.add('active');
        
        this.activeStrategy = strategyName;
        
        // Si on change vers Aave, charger les soldes et mettre √† jour les m√©triques
        if (strategyName === 'aave') {
            if (this.walletConnected) {
                // Recharger les soldes si n√©cessaire
                if (Object.keys(this.tokenBalances).length === 0) {
                    this.loadTokenBalances();
                } else {
                    // Juste mettre √† jour l'affichage
                    this.updateAaveMetrics();
                }
            } else {
                // Wallet pas connect√©, afficher valeurs par d√©faut
                this.updateAaveMetrics();
            }
        } else {
            // Pour les autres strat√©gies, utiliser leurs fonctions de mise √† jour
            this.updateStrategyMetrics();
        }
    }

    // ===== AAVE STRATEGY =====
    updateAaveMetrics() {
        const amount = parseFloat(document.getElementById('aaveAmount')?.value) || 0;
        const selectedAsset = document.getElementById('aaveAssetSelect')?.value || 'weth';
        
        // APRs r√©els d'Aave sur Polygon
        const aprs = {
            weth: 5.2,
            usdc: 3.71, // APR r√©el que vous avez confirm√©
            wmatic: 6.1,
            wbtc: 4.9
        };
        
        // Prix approximatifs en USD pour calculs
        const prices = {
            weth: 2500,
            usdc: 1,
            wmatic: 0.8,
            wbtc: 45000
        };
        
        const currentAPR = aprs[selectedAsset] || 5.0;
        const price = prices[selectedAsset] || 1;
        
        // Calculs de rendement bas√©s sur le montant saisi
        let dailyYield = 0;
        let monthlyYield = 0;
        let dailyUSD = 0;
        let monthlyUSD = 0;
        
        if (amount > 0) {
            // Calcul des rendements en tokens
            dailyYield = (amount * currentAPR / 100 / 365);
            monthlyYield = dailyYield * 30;
            
            // Conversion en USD
            dailyUSD = dailyYield * price;
            monthlyUSD = monthlyYield * price;
        }
        
        // Mettre √† jour l'interface avec animation
        const aprElement = document.getElementById('aaveCurrentAPR');
        const dailyElement = document.getElementById('aaveDailyYield');
        const monthlyElement = document.getElementById('aaveMonthlyYield');
        const symbolElement = document.getElementById('aaveAssetSymbol');
        const aTokenElement = document.getElementById('aTokenName');
        
        if (aprElement) {
            aprElement.classList.add('updating');
            aprElement.textContent = `${currentAPR}%`;
            setTimeout(() => aprElement.classList.remove('updating'), 300);
        }
        
        if (dailyElement) {
            dailyElement.classList.add('updating');
            if (amount > 0) {
                dailyElement.textContent = `$${dailyUSD.toFixed(4)} (${dailyYield.toFixed(6)} ${selectedAsset.toUpperCase()})`;
            } else {
                dailyElement.textContent = `$0.0000`;
            }
            setTimeout(() => dailyElement.classList.remove('updating'), 300);
        }
        
        if (monthlyElement) {
            monthlyElement.classList.add('updating');
            if (amount > 0) {
                monthlyElement.textContent = `$${monthlyUSD.toFixed(2)} (${monthlyYield.toFixed(4)} ${selectedAsset.toUpperCase()})`;
            } else {
                monthlyElement.textContent = `$0.00`;
            }
            setTimeout(() => monthlyElement.classList.remove('updating'), 300);
        }
        
        if (symbolElement) {
            symbolElement.textContent = selectedAsset.toUpperCase();
        }
        
        if (aTokenElement) {
            aTokenElement.textContent = `a${selectedAsset.toUpperCase()}`;
        }
        
        // NOUVEAU: Mettre √† jour les informations de lending
        this.updateLendingInfo(selectedAsset, currentAPR);
        
        // Mettre √† jour l'affichage du solde et la validation
        this.updateBalanceDisplay();
        this.validateAaveForm();
        
        console.log(`üìä M√©triques Aave mises √† jour:`, {
            asset: selectedAsset,
            amount: amount,
            apr: currentAPR + '%',
            dailyUSD: '$' + dailyUSD.toFixed(4),
            monthlyUSD: '$' + monthlyUSD.toFixed(2)
        });
    }

    // ===== NOUVELLE FONCTION POUR METTRE √Ä JOUR LES INFOS DE LENDING =====
    updateLendingInfo(selectedAsset, currentAPR) {
        // Informations sp√©cifiques √† chaque asset
        const assetInfos = {
            weth: {
                strategy: 'Lending ETH',
                aToken: 'aWETH',
                liquidity: 'Excellente',
                features: 'Collat√©ral premium'
            },
            usdc: {
                strategy: 'Lending Stablecoin',
                aToken: 'aUSDC',
                liquidity: 'Tr√®s √©lev√©e',
                features: 'Stable, faible risque'
            },
            wmatic: {
                strategy: 'Lending MATIC',
                aToken: 'aWMATIC',
                liquidity: '√âlev√©e',
                features: 'Token natif Polygon'
            },
            wbtc: {
                strategy: 'Lending Bitcoin',
                aToken: 'aWBTC',
                liquidity: 'Bonne',
                features: 'Bitcoin sur Ethereum'
            }
        };
        
        const info = assetInfos[selectedAsset] || assetInfos.weth;
        
        // Mettre √† jour les √©l√©ments du DOM
        const strategyElement = document.querySelector('.info-item:nth-child(1) strong');
        const aTokenElement = document.querySelector('.info-item:nth-child(2) strong');
        const interestElement = document.querySelector('.info-item:nth-child(3) strong');
        const liquidityElement = document.querySelector('.info-item:nth-child(4) strong');
        
        if (strategyElement) strategyElement.textContent = info.strategy;
        if (aTokenElement) aTokenElement.textContent = info.aToken;
        if (interestElement) interestElement.textContent = `${currentAPR}% APR`;
        if (liquidityElement) liquidityElement.textContent = info.liquidity;
    }

    async deployAaveStrategy() {
        if (!this.walletConnected) {
            alert('Veuillez connecter votre wallet');
            return;
        }

        const amount = document.getElementById('aaveAmount').value;
        const selectedAsset = document.getElementById('aaveAssetSelect').value;
        
        if (!amount || parseFloat(amount) <= 0) {
            alert('Veuillez entrer un montant valide');
            return;
        }

        // V√©rification du solde avant de continuer
        let availableBalance = 0;
        let assetInfo = null;
        let tokenAddress = null;
        
        if (selectedAsset === 'usdc') {
            const usdcInfo = this.getBestUSDCBalance();
            availableBalance = usdcInfo.balance;
            tokenAddress = usdcInfo.address;
            
           if (usdcInfo.type === 'NATIVE') {
                assetInfo = { ...AAVE_V3_POLYGON.ASSETS.USDC, address: tokenAddress, symbol: 'USDC' };
            } else {
                assetInfo = AAVE_V3_POLYGON.ASSETS.USDC;
            }
        } else if (selectedAsset === 'weth') {
            availableBalance = parseFloat(this.tokenBalances.WETH || "0");
            assetInfo = AAVE_V3_POLYGON.ASSETS.WETH;
            tokenAddress = assetInfo.address;
        } else {
            availableBalance = parseFloat(this.tokenBalances[selectedAsset.toUpperCase()] || "0");
            assetInfo = AAVE_V3_POLYGON.ASSETS[selectedAsset.toUpperCase()];
            tokenAddress = assetInfo.address;
        }
        
        if (parseFloat(amount) > availableBalance) {
            alert(`‚ùå Solde insuffisant!\n\nVous voulez d√©poser: ${amount} ${assetInfo.symbol}\nSolde disponible: ${availableBalance.toFixed(6)} ${assetInfo.symbol}`);
            return;
        }

        this.showLoadingModal('D√©p√¥t sur Aave en cours...');

        try {
            const provider = new ethers.BrowserProvider(window.ethereum);
            const signer = await provider.getSigner();
            const userAddress = await signer.getAddress();
            
            console.log("=== AAVE LENDING SIMPLE ===");
            console.log("Asset:", selectedAsset);
            console.log("Montant:", amount);
            console.log("Adresse token:", tokenAddress);
            console.log("Solde disponible:", availableBalance);
            
            const amountInWei = ethers.parseUnits(amount, assetInfo.decimals);
            
            // ABI du Pool Aave V3
            const AAVE_POOL_ABI = [
                "function supply(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external",
                "function getUserAccountData(address user) external view returns (uint256 totalCollateralBase, uint256 totalDebtBase, uint256 availableBorrowsBase, uint256 currentLiquidationThreshold, uint256 ltv, uint256 healthFactor)"
            ];
            
            const aavePool = new ethers.Contract(AAVE_V3_POLYGON.POOL, AAVE_POOL_ABI, signer);
            
            let tx;
            
            if (selectedAsset === 'weth') {
                // Pour WETH, on doit d'abord convertir ETH en WETH
                console.log('Conversion ETH -> WETH...');
                
                const WETH_ABI = [
                    "function deposit() payable",
                    "function approve(address spender, uint256 amount) returns (bool)"
                ];
                
                const wethContract = new ethers.Contract(assetInfo.address, WETH_ABI, signer);
                
                // Convertir ETH en WETH
                const depositTx = await wethContract.deposit({ value: amountInWei });
                await depositTx.wait();
                console.log('‚úÖ ETH converti en WETH');
                
                // Approuver WETH pour Aave
                const approveTx = await wethContract.approve(AAVE_V3_POLYGON.POOL, amountInWei);
                await approveTx.wait();
                console.log('‚úÖ WETH approuv√© pour Aave');
                
                // D√©poser sur Aave
                tx = await aavePool.supply(assetInfo.address, amountInWei, userAddress, 0);
                
            } else {
                // Pour les autres tokens, approuver puis d√©poser
                console.log(`Approbation ${assetInfo.symbol}...`);
                
                const tokenContract = new ethers.Contract(tokenAddress, ERC20_ABI, signer);
                
                const approveTx = await tokenContract.approve(AAVE_V3_POLYGON.POOL, amountInWei);
                await approveTx.wait();
                console.log(`‚úÖ ${assetInfo.symbol} approuv√©`);
                
                // D√©poser sur Aave
                tx = await aavePool.supply(tokenAddress, amountInWei, userAddress, 0);
            }
            
            console.log('üì§ Transaction Aave envoy√©e:', tx.hash);
            
            const receipt = await tx.wait();
            console.log('‚úÖ D√©p√¥t Aave confirm√©!', receipt.hash);

            this.captureNewDeposit(
                selectedAsset,   // L'asset s√©lectionn√© (ex: 'usdc')
                amount,          // Le montant d√©pos√©
                tx.hash          // Le hash de la transaction
            );
            
            // Ajouter la position √† l'interface
            const newPosition = {
                id: Date.now(),
                strategy: 'Aave Lending',
                pool: `${assetInfo.symbol} Supply`,
                amount: `${amount} ${assetInfo.symbol}`,
                apr: '5.2%', // APR de base, sera mis √† jour
                pnl: '+0.00%',
                status: 'active',
                aToken: assetInfo.aToken
            };
            
            this.positions.push(newPosition);
            this.updateDashboardStats();
            
            // Mettre √† jour l'interface Aave
            this.updateAavePositions();
            
            // Recharger les soldes
            await this.loadTokenBalances();
            
            this.hideLoadingModal();
            
            alert(`üéâ D√©p√¥t Aave r√©ussi!\n\nüí∞ ${amount} ${assetInfo.symbol} d√©pos√©\nüìà Vous recevez des aTokens qui g√©n√®rent des int√©r√™ts automatiquement\n\nüìÑ Transaction: ${tx.hash}\nüîó Voir sur PolygonScan: https://polygonscan.com/tx/${tx.hash}`);
            
        } catch (error) {
            this.hideLoadingModal();
            console.error('‚ùå Erreur Aave:', error);
            
            let errorMessage = "Erreur Aave inconnue";
            
            if (error.code === 4001) {
                errorMessage = 'Transaction annul√©e par l\'utilisateur';
            } else if (error.reason) {
                errorMessage = `Erreur Aave: ${error.reason}`;
            } else if (error.message) {
                errorMessage = `Erreur: ${error.message}`;
            }
            
            alert(errorMessage);
        }
        this.showNotification(`‚ùå ${errorMessage}`, 'error');
    }

    // Fonction pour r√©cup√©rer les rendements
    async collectAaveRewards() {
        if (!this.walletConnected) {
            this.showNotification('Veuillez connecter votre wallet', 'warning');
            return;
        }
        
        try {
            this.showLoadingModal('R√©cup√©ration des rendements en cours...');
            
            const provider = new ethers.BrowserProvider(window.ethereum);
            const signer = await provider.getSigner();
            
            // R√©cup√©rer l'historique des d√©p√¥ts
            let depositHistory = [];
            try {
                const savedHistory = localStorage.getItem('aaveDepositHistory');
                if (savedHistory) {
                    depositHistory = JSON.parse(savedHistory);
                }
            } catch (error) {
                console.error('‚ùå Erreur lors du chargement de l\'historique des d√©p√¥ts:', error);
                depositHistory = [];
            }
            
            // Calculer le d√©p√¥t total initial
            const totalInitialDeposit = depositHistory.reduce((sum, entry) => sum + entry.amount, 0);
            
            // R√©cup√©rer le solde actuel sur Aave
            const AAVE_POOL_ABI = [
                "function getUserAccountData(address user) external view returns (uint256 totalCollateralBase, uint256 totalDebtBase, uint256 availableBorrowsBase, uint256 currentLiquidationThreshold, uint256 ltv, uint256 healthFactor)"
            ];
            
            const aavePool = new ethers.Contract(AAVE_V3_POLYGON.POOL, AAVE_POOL_ABI, provider);
            const accountData = await aavePool.getUserAccountData(this.currentAccount);
            
            // Convertir en format lisible (base = 8 d√©cimales pour le prix USD)
            const totalCollateralUSD = ethers.formatUnits(accountData.totalCollateralBase, 8);
            const currentValue = parseFloat(totalCollateralUSD);
            
            // Calculer les gains
            const earnings = currentValue - totalInitialDeposit;
            
            // S'assurer qu'il y a des gains √† r√©cup√©rer
            if (earnings <= 0) {
                this.hideLoadingModal();
                this.showNotification('‚ùå Aucun rendement √† r√©cup√©rer', 'warning');
                return;
            }
            
            // ABI pour le retrait
            const WITHDRAW_ABI = [
                "function withdraw(address asset, uint256 amount, address to) external returns (uint256)"
            ];
            
            // Pr√©parer le montant des gains √† retirer (avec les d√©cimales appropri√©es)
            const earningsWithDecimals = ethers.parseUnits(earnings.toFixed(6), 6); // 6 d√©cimales pour USDC
            
            // Adresse du token USDC
            const usdcAddress = AAVE_V3_POLYGON.ASSETS.USDC.address;
            
            const withdrawContract = new ethers.Contract(AAVE_V3_POLYGON.POOL, WITHDRAW_ABI, signer);
            
            console.log(`üîÑ Retrait des rendements: ${earnings.toFixed(6)} USDC`);
            
            // Effectuer le retrait des rendements uniquement
            const tx = await withdrawContract.withdraw(
                usdcAddress,
                earningsWithDecimals,
                this.currentAccount
            );
            
            console.log('üì§ Transaction envoy√©e:', tx.hash);
            
            const receipt = await tx.wait();
            console.log('‚úÖ Retrait des rendements confirm√©:', receipt.hash);
            
            // Ajouter une entr√©e dans l'historique pour le retrait des rendements
            const withdrawalEntry = {
                id: Date.now(),
                date: new Date().toISOString(),
                asset: 'USDC',
                amount: -earnings, // Montant n√©gatif pour indiquer un retrait
                apy: 0, // Non applicable pour un retrait
                txHash: receipt.hash,
                notes: 'Retrait des rendements accumul√©s'
            };
            
            depositHistory.push(withdrawalEntry);
            localStorage.setItem('aaveDepositHistory', JSON.stringify(depositHistory));
            
            this.hideLoadingModal();
            this.showNotification(`‚úÖ ${earnings.toFixed(6)} USDC de rendements r√©cup√©r√©s avec succ√®s!`, 'success');
            
            // Rafra√Æchir l'affichage
            await this.loadAavePositions();
            
        } catch (error) {
            this.hideLoadingModal();
            console.error('‚ùå Erreur lors de la r√©cup√©ration des rendements:', error);
            
            let errorMessage = 'Erreur lors de la r√©cup√©ration des rendements';
            if (error.code === 4001) {
                errorMessage = 'Transaction rejet√©e par l\'utilisateur';
            } else if (error.message?.includes('execution reverted')) {
                errorMessage = 'Transaction annul√©e par le contrat. V√©rifiez votre solde et les param√®tres.';
            }
            
            this.showNotification(`‚ùå ${errorMessage}`, 'error');
        }
    }

    // Fonction pour retirer la position
    async withdrawAavePosition() {
        if (!this.walletConnected) {
            this.showNotification('Veuillez connecter votre wallet', 'warning');
            return;
        }
        
        if (!confirm('√ätes-vous s√ªr de vouloir retirer votre position Aave?\nCela retirera votre capital et les rendements accumul√©s.')) {
            return;
        }
        
        try {
            this.showLoadingModal('Retrait de la position Aave en cours...');
            
            const provider = new ethers.BrowserProvider(window.ethereum);
            const signer = await provider.getSigner();
            
            // R√©cup√©rer le solde actuel sur Aave
            const AAVE_POOL_ABI = [
                "function getUserAccountData(address user) external view returns (uint256 totalCollateralBase, uint256 totalDebtBase, uint256 availableBorrowsBase, uint256 currentLiquidationThreshold, uint256 ltv, uint256 healthFactor)"
            ];
            
            const aavePool = new ethers.Contract(AAVE_V3_POLYGON.POOL, AAVE_POOL_ABI, provider);
            const accountData = await aavePool.getUserAccountData(this.currentAccount);
            
            // Convertir en format lisible (base = 8 d√©cimales pour le prix USD)
            const totalCollateralUSD = ethers.formatUnits(accountData.totalCollateralBase, 8);
            const currentValue = parseFloat(totalCollateralUSD);
            
            // S'assurer qu'il y a une position √† retirer
            if (currentValue <= 0) {
                this.hideLoadingModal();
                this.showNotification('‚ùå Aucune position √† retirer', 'warning');
                return;
            }
            
            // ABI pour le retrait
            const WITHDRAW_ABI = [
                "function withdraw(address asset, uint256 amount, address to) external returns (uint256)"
            ];
            
            // Adresse du token USDC
            const usdcAddress = AAVE_V3_POLYGON.ASSETS.USDC.address;
            
            const withdrawContract = new ethers.Contract(AAVE_V3_POLYGON.POOL, WITHDRAW_ABI, signer);
            
            console.log(`üîÑ Retrait complet de la position: ${currentValue.toFixed(6)} USDC`);
            
            // Utiliser uint256.max pour retirer tout le solde
            const maxUint256 = ethers.MaxUint256;
            
            // Effectuer le retrait complet
            const tx = await withdrawContract.withdraw(
                usdcAddress,
                maxUint256,
                this.currentAccount
            );
            
            console.log('üì§ Transaction envoy√©e:', tx.hash);
            
            const receipt = await tx.wait();
            console.log('‚úÖ Retrait complet confirm√©:', receipt.hash);
            
            // R√©cup√©rer l'historique des d√©p√¥ts
            let depositHistory = [];
            try {
                const savedHistory = localStorage.getItem('aaveDepositHistory');
                if (savedHistory) {
                    depositHistory = JSON.parse(savedHistory);
                }
            } catch (error) {
                console.error('‚ùå Erreur lors du chargement de l\'historique des d√©p√¥ts:', error);
                depositHistory = [];
            }
            
            // Ajouter une entr√©e dans l'historique pour le retrait complet
            const withdrawalEntry = {
                id: Date.now(),
                date: new Date().toISOString(),
                asset: 'USDC',
                amount: -currentValue, // Montant n√©gatif pour indiquer un retrait
                apy: 0, // Non applicable pour un retrait
                txHash: receipt.hash,
                notes: 'Retrait complet de la position'
            };
            
            depositHistory.push(withdrawalEntry);
            localStorage.setItem('aaveDepositHistory', JSON.stringify(depositHistory));
            
            this.hideLoadingModal();
            this.showNotification(`‚úÖ Position de ${currentValue.toFixed(6)} USDC retir√©e avec succ√®s!`, 'success');
            
            // Rafra√Æchir l'affichage
            await this.loadAavePositions();
            
            // Mettre √† jour les soldes de tokens
            await this.loadTokenBalances();
            
        } catch (error) {
            this.hideLoadingModal();
            console.error('‚ùå Erreur lors du retrait de la position:', error);
            
            let errorMessage = 'Erreur lors du retrait de la position';
            if (error.code === 4001) {
                errorMessage = 'Transaction rejet√©e par l\'utilisateur';
            } else if (error.message?.includes('execution reverted')) {
                errorMessage = 'Transaction annul√©e par le contrat. V√©rifiez votre solde et les param√®tres.';
            }
            
            this.showNotification(`‚ùå ${errorMessage}`, 'error');
        }
    }

    // Fonction pour capturer les nouveaux d√©p√¥ts
    // Cette fonction doit √™tre appel√©e apr√®s chaque d√©p√¥t r√©ussi
    captureNewDeposit(asset, amount, txHash) {
        // R√©cup√©rer l'historique existant
        let depositHistory = [];
        try {
            const savedHistory = localStorage.getItem('aaveDepositHistory');
            if (savedHistory) {
                depositHistory = JSON.parse(savedHistory);
            }
        } catch (error) {
            console.error('‚ùå Erreur lors du chargement de l\'historique des d√©p√¥ts:', error);
            depositHistory = [];
        }
        
        // R√©cup√©rer l'APY actuel (utiliser une valeur par d√©faut si non disponible)
        let currentAPY = 3.71; // Valeur par d√©faut
        
        // Cr√©er la nouvelle entr√©e
        const newDeposit = {
            id: Date.now(),
            date: new Date().toISOString(),
            asset: asset.toUpperCase(),
            amount: parseFloat(amount),
            apy: currentAPY,
            txHash: txHash,
            notes: 'D√©p√¥t via l\'application'
        };
        
        // Ajouter au tableau et sauvegarder
        depositHistory.push(newDeposit);
        localStorage.setItem('aaveDepositHistory', JSON.stringify(depositHistory));
        
        console.log('üíæ Nouveau d√©p√¥t enregistr√© dans l\'historique:', newDeposit);
    }

    // Fonction pour mettre √† jour l'affichage des positions Aave avec les boutons d'action
    updateAavePositionsWithActions(currentValue, earnings, earningsPercentage, currentAPY, actualUSDCAmount, projections, depositHistory) {
    // R√©cup√©rer les √©l√©ments
    const positionsSection = document.getElementById('aavePositions');
    const positionsList = document.getElementById('aavePositionsList');
    
    if (!positionsSection || !positionsList) {
        console.error('‚ùå √âl√©ments pour l\'affichage des positions Aave non trouv√©s');
        return;
    }
    
    // Vider et afficher la section
    positionsList.innerHTML = '';
    positionsSection.style.display = 'block';
    
    // Cr√©er l'√©l√©ment de position principal
    const positionItem = document.createElement('div');
    positionItem.className = 'aave-position-item';
    
    // En-t√™te avec les informations de base
    const header = document.createElement('div');
    header.className = 'position-header';
    
    // Information sur la position
    const info = document.createElement('div');
    info.className = 'position-info';
    
    const assetSpan = document.createElement('span');
    assetSpan.className = 'asset';
    assetSpan.textContent = 'USDC Supply';
    
    const amountSpan = document.createElement('span');
    amountSpan.className = 'amount';
    amountSpan.textContent = `${actualUSDCAmount} USDC`;
    
    info.appendChild(assetSpan);
    info.appendChild(amountSpan);
    
    // Informations sur le rendement
    const yieldInfo = document.createElement('div');
    yieldInfo.className = 'position-yield';
    
    const apySpan = document.createElement('span');
    apySpan.className = 'apr'; // Garder la classe CSS existante
    apySpan.textContent = `${currentAPY.toFixed(2)}% APY`; // Changer APR en APY
    
    const pnlSpan = document.createElement('span');
    pnlSpan.className = `pnl ${earnings >= 0 ? 'text-success' : 'text-danger'}`;
    pnlSpan.textContent = `${earnings >= 0 ? '+' : ''}${earnings.toFixed(4)} USD (${earnings >= 0 ? '+' : ''}${earningsPercentage.toFixed(4)}%)`;
    
    yieldInfo.appendChild(apySpan);
    yieldInfo.appendChild(pnlSpan);
    
    header.appendChild(info);
    header.appendChild(yieldInfo);
    
    // D√©tails avec les valeurs actuelles et projections
    const details = document.createElement('div');
    details.className = 'position-details';
    
    // Fonction d'aide pour cr√©er des √©l√©ments de d√©tail
    function createDetailItem(label, value, isSuccess = false) {
        const detailItem = document.createElement('div');
        detailItem.className = 'detail-item';
        
        const labelSpan = document.createElement('span');
        labelSpan.className = 'label';
        labelSpan.textContent = label;
        
        const valueSpan = document.createElement('span');
        valueSpan.className = isSuccess ? 'value text-success' : 'value';
        valueSpan.textContent = value;
        
        detailItem.appendChild(labelSpan);
        detailItem.appendChild(valueSpan);
        
        return detailItem;
    }
    
    // Ajouter les d√©tails
    const initialDeposit = depositHistory.reduce((sum, entry) => sum + entry.amount, 0);
    
    details.appendChild(createDetailItem('D√©p√¥t initial total:', `${initialDeposit.toFixed(6)} USDC`));
    details.appendChild(createDetailItem('Valeur actuelle:', `${actualUSDCAmount} USDC`));
    details.appendChild(createDetailItem(
        'Gains accumul√©s:', 
        `${earnings >= 0 ? '+' : ''}${earnings.toFixed(4)} USDC (${earnings >= 0 ? '+' : ''}${earningsPercentage.toFixed(4)}%)`,
        earnings >= 0
    ));
    
    // Projections bas√©es sur l'APY actuel
    details.appendChild(createDetailItem('Rendement journalier:', `+${projections.daily} USDC`, true));
    details.appendChild(createDetailItem('Rendement mensuel:', `+${projections.monthly} USDC`, true));
    details.appendChild(createDetailItem('Rendement annuel:', `+${projections.yearly} USDC`, true));
    
    // Boutons d'action
    const actions = document.createElement('div');
    actions.className = 'position-actions';
    
    // Bouton pour r√©cup√©rer les rendements
    const collectBtn = document.createElement('button');
    collectBtn.className = 'action-btn collect-btn';
    collectBtn.onclick = () => this.collectAaveRewards();
    
    const collectIcon = document.createElement('i');
    collectIcon.className = 'fas fa-coins';
    collectBtn.appendChild(collectIcon);
    collectBtn.appendChild(document.createTextNode(' R√©cup√©rer les rendements'));
    
    // Bouton pour retirer le capital
    const withdrawBtn = document.createElement('button');
    withdrawBtn.className = 'action-btn withdraw-btn';
    withdrawBtn.onclick = () => this.withdrawAavePosition();
    
    const withdrawIcon = document.createElement('i');
    withdrawIcon.className = 'fas fa-wallet';
    withdrawBtn.appendChild(withdrawIcon);
    withdrawBtn.appendChild(document.createTextNode(' Retirer le capital'));
    
    // Lien pour voir sur Aave
    const viewLink = document.createElement('a');
    viewLink.href = 'https://app.aave.com/dashboard';
    viewLink.target = '_blank';
    viewLink.className = 'action-btn view-btn';
    
    const viewIcon = document.createElement('i');
    viewIcon.className = 'fas fa-external-link-alt';
    viewLink.appendChild(viewIcon);
    viewLink.appendChild(document.createTextNode(' Voir sur Aave'));
    
    actions.appendChild(collectBtn);
    actions.appendChild(withdrawBtn);
    actions.appendChild(viewLink);
    
    // Assembler la section principale
    positionItem.appendChild(header);
    positionItem.appendChild(details);
    positionItem.appendChild(actions);
    
    // Tableau d'historique des d√©p√¥ts
    const historySection = document.createElement('div');
    historySection.className = 'deposit-history-section';
    
    const historyTitle = document.createElement('h4');
    historyTitle.textContent = 'Historique des d√©p√¥ts';
    historySection.appendChild(historyTitle);
    
    // Cr√©er le tableau d'historique
    const historyTable = document.createElement('table');
    historyTable.className = 'deposit-history-table';
    
    // En-t√™te du tableau
    const thead = document.createElement('thead');
    const headerRow = document.createElement('tr');
    
    ['Date', 'Asset', 'Montant', 'APY au d√©p√¥t', 'Transaction', 'Notes'].forEach(text => {
        const th = document.createElement('th');
        th.textContent = text;
        headerRow.appendChild(th);
    });
    
    thead.appendChild(headerRow);
    historyTable.appendChild(thead);
    
    // Corps du tableau
    const tbody = document.createElement('tbody');
    
    depositHistory.forEach(entry => {
        const row = document.createElement('tr');
        
        // Date format√©e
        const dateCell = document.createElement('td');
        const date = new Date(entry.date);
        dateCell.textContent = date.toLocaleDateString() + ' ' + date.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
        row.appendChild(dateCell);
        
        // Asset
        const assetCell = document.createElement('td');
        assetCell.textContent = entry.asset;
        row.appendChild(assetCell);
        
        // Montant
        const amountCell = document.createElement('td');
        amountCell.textContent = entry.amount.toFixed(6);
        row.appendChild(amountCell);
        
        // APY au moment du d√©p√¥t
        const apyCell = document.createElement('td');
        apyCell.textContent = entry.apy ? entry.apy.toFixed(2) + '%' : 'N/A';
        row.appendChild(apyCell);
        
        // Hash de transaction
        const txCell = document.createElement('td');
        if (entry.txHash) {
            const txLink = document.createElement('a');
            txLink.href = `https://polygonscan.com/tx/${entry.txHash}`;
            txLink.target = '_blank';
            txLink.textContent = entry.txHash.substring(0, 8) + '...';
            txCell.appendChild(txLink);
        } else {
            txCell.textContent = 'N/A';
        }
        row.appendChild(txCell);
        
        // Notes
        const notesCell = document.createElement('td');
        notesCell.textContent = entry.notes || '';
        row.appendChild(notesCell);
        
        tbody.appendChild(row);
    });
    
    historyTable.appendChild(tbody);
    historySection.appendChild(historyTable);
    
    // Bouton pour ajouter un d√©p√¥t manuellement (pour les d√©p√¥ts pass√©s)
    const addDepositBtn = document.createElement('button');
    addDepositBtn.className = 'action-btn add-deposit-btn';
    addDepositBtn.innerHTML = '<i class="fas fa-plus"></i> Ajouter un d√©p√¥t manuellement';
    addDepositBtn.onclick = () => this.showAddDepositModal();
    
    historySection.appendChild(addDepositBtn);
    
    // Ajouter tout √† la liste des positions
    positionsList.appendChild(positionItem);
    positionsList.appendChild(historySection);
    
    // Afficher le bouton de retrait dans la section principale
    const withdrawMainBtn = document.getElementById('aaveWithdrawBtn');
    if (withdrawMainBtn) withdrawMainBtn.style.display = 'inline-flex';
    
    console.log('‚úÖ Section des positions Aave mise √† jour avec les boutons d\'action');
}

    // Fonction pour mettre √† jour les positions Aave
    updateAavePositions() {
        // Afficher la section des positions si l'utilisateur a des positions
        const hasAavePositions = this.positions.some(pos => pos.strategy === 'Aave Lending');
        
        const positionsSection = document.getElementById('aavePositions');
        const withdrawBtn = document.getElementById('aaveWithdrawBtn');
        
        if (hasAavePositions) {
            if (positionsSection) positionsSection.style.display = 'block';
            if (withdrawBtn) withdrawBtn.style.display = 'inline-flex';
            
            // Mettre √† jour la liste des positions
            const positionsList = document.getElementById('aavePositionsList');
            if (positionsList) {
                const aavePositions = this.positions.filter(pos => pos.strategy === 'Aave Lending');
                
                positionsList.innerHTML = aavePositions.map(pos => `
                    <div class="aave-position-item">
                        <div class="position-info">
                            <span class="asset">${pos.pool}</span>
                            <span class="amount">${pos.amount}</span>
                        </div>
                        <div class="position-yield">
                            <span class="apr">${pos.apr}</span>
                            <span class="pnl">${pos.pnl}</span>
                        </div>
                    </div>
                `).join('');
            }
        } else {
            if (positionsSection) positionsSection.style.display = 'none';
            if (withdrawBtn) withdrawBtn.style.display = 'none';
        }
    }

    // ===== FLASH LOAN STRATEGY =====
    async executeFlashLoan(opportunity) {
        if (!this.walletConnected) {
            alert('Veuillez connecter votre wallet');
            return;
        }

        this.showLoadingModal('Ex√©cution du Flash Loan...');

        try {
            // Simulation temporis√©e
            await new Promise(resolve => setTimeout(resolve, 2000));
            
            // Simuler un profit
            const profit = Math.random() * 100 + 20;
            
            alert(`Flash Loan ex√©cut√© avec succ√®s! Profit: $${profit.toFixed(2)}`);
            this.hideLoadingModal();
            
        } catch (error) {
            this.hideLoadingModal();
            alert('Erreur lors de l\'ex√©cution du Flash Loan');
        }
    }

    // ===== NOUVELLE FONCTION POUR VOIR LES TRANSACTIONS =====
    viewTransaction(txHash) {
        const url = `https://polygonscan.com/tx/${txHash}`;
        window.open(url, '_blank');
        this.showNotification('üîó Transaction ouverte dans PolygonScan', 'info');
    }

    updateDashboardStats() {
        // Calculer les statistiques du portefeuille
        const totalValue = this.positions.reduce((sum, pos) => {
            const amount = parseFloat(pos.amount.split(' ')[0]) || 0;
            return sum + amount * 2000; // Estimation prix ETH √† 2000$
        }, 0);

        const dailyYield = totalValue * 0.002; // Estimation 0.2% rendement quotidien
        const avgAPR = this.positions.length > 0 ? 
            this.positions.reduce((sum, pos) => sum + parseFloat(pos.apr) || 0, 0) / this.positions.length : 0;

        // Mettre √† jour les cartes de statistiques
        const valueElement = document.querySelector('.stat-card:nth-child(1) .stat-value');
        const yieldElement = document.querySelector('.stat-card:nth-child(2) .stat-value');
        const aprElement = document.querySelector('.stat-card:nth-child(3) .stat-value');
        const positionsElement = document.querySelector('.stat-card:nth-child(4) .stat-value');
    
        if (valueElement) valueElement.textContent = `$${totalValue.toFixed(2)}`;
        if (yieldElement) yieldElement.textContent = `$${dailyYield.toFixed(2)}`;
        if (aprElement) aprElement.textContent = `${avgAPR.toFixed(1)}%`;
        if (positionsElement) positionsElement.textContent = this.positions.length;
    }

    // ===== UTILITY FUNCTIONS =====
    showLoadingModal(message) {
        const modal = document.getElementById('loadingModal');
        if (!modal) return;
    
        const messageElement = modal.querySelector('p');
        if (messageElement) messageElement.textContent = message;
    
        modal.classList.add('active');
    }

    hideLoadingModal() {
        const modal = document.getElementById('loadingModal');
        if (modal) modal.classList.remove('active');
    }

    generateArbitrageOpportunities() {
        // Simuler des opportunit√©s d'arbitrage en temps r√©el
        const opportunities = [
            {
                pair: 'ETH/USDC',
                exchanges: 'Curve ‚Üí Balancer',
                profit: (Math.random() * 50 + 20).toFixed(2),
                percentage: (Math.random() * 0.5 + 0.1).toFixed(2)
            },
            {
                pair: 'WBTC/ETH',
                exchanges: 'Curve ‚Üí Balancer',
                profit: (Math.random() * 100 + 40).toFixed(2),
                percentage: (Math.random() * 0.4 + 0.2).toFixed(2)
            }
        ];

        this.updateArbitrageOpportunities(opportunities);
    }

    updateArbitrageOpportunities(opportunities) {
        const opportunityList = document.querySelector('.opportunity-list');
        if (opportunityList) {
            opportunityList.innerHTML = opportunities.map(opp => `
                <div class="opportunity-item">
                    <div class="opportunity-info">
                        <span class="pair">${opp.pair}</span>
                        <span class="exchanges">${opp.exchanges}</span>
                    </div>
                    <div class="opportunity-profit">
                        <span class="profit-amount">+$${opp.profit}</span>
                        <span class="profit-percentage">${opp.percentage}%</span>
                    </div>
                    <button class="execute-btn" onclick="app.executeFlashLoan('${opp.pair}')">
                        Ex√©cuter
                    </button>
                </div>
            `).join('');
        }
    }

    // Fonction pour d√©finir le montant maximum disponible
    setMaxAmount() {
        if (!this.walletConnected) {
            this.showNotification('Veuillez d\'abord connecter votre wallet', 'warning');
            return;
        }
        
        const selectedAsset = document.getElementById('aaveAssetSelect').value;
        const amountInput = document.getElementById('aaveAmount');
        
        let maxBalance = 0;
        let warningMsg = '';
        
        if (selectedAsset === 'usdc') {
            const usdcInfo = this.getBestUSDCBalance();
            maxBalance = usdcInfo.balance;
        } else if (selectedAsset === 'weth') {
            // Pour WETH, utiliser le solde WETH r√©el
            maxBalance = parseFloat(this.tokenBalances.WETH || "0");
            
            if (maxBalance === 0) {
                const maticBalance = parseFloat(this.tokenBalances.NATIVE || "0");
                if (maticBalance > 0) {
                    warningMsg = `Vous avez ${maticBalance.toFixed(4)} MATIC. Convertissez d'abord en WETH.`;
                } else {
                    warningMsg = 'Aucun WETH disponible. Transf√©rez du WETH ou convertissez du MATIC.';
                }
            }
        } else if (selectedAsset === 'wmatic') {
            // Pour WMATIC, utiliser le solde WMATIC token
            maxBalance = parseFloat(this.tokenBalances.WMATIC || "0");
            
            if (maxBalance === 0) {
                const nativeBalance = parseFloat(this.tokenBalances.NATIVE || "0");
                if (nativeBalance > 0) {
                    warningMsg = `Vous avez ${nativeBalance.toFixed(4)} MATIC natif. Convertissez d'abord en WMATIC.`;
                }
            }
        } else {
            maxBalance = parseFloat(this.tokenBalances[selectedAsset.toUpperCase()] || "0");
        }
        
        if (maxBalance > 0) {
            // Garder une petite marge de s√©curit√© (99.9%)
            const maxAmount = maxBalance * 0.999;
            amountInput.value = maxAmount.toFixed(8);
            
            // D√©clencher imm√©diatement la mise √† jour des m√©triques
            this.updateAaveMetrics();
            
            // Notification de succ√®s
            this.showNotification(`üí∞ Montant maximum d√©fini: ${maxAmount.toFixed(6)} ${selectedAsset.toUpperCase()}`, 'success');
        } else {
            if (warningMsg) {
                this.showNotification(`‚ö†Ô∏è ${warningMsg}`, 'warning');
            } else {
                this.showNotification(`‚ùå Aucun solde ${selectedAsset.toUpperCase()} disponible`, 'error');
            }
        }
    }

    // ===== FONCTIONS POUR D√âTECTER LES CHANGEMENTS DE R√âSEAU =====
    handleNetworkChange() {
        console.log('üåê Changement de r√©seau d√©tect√©, rechargement des soldes...');
        
        // R√©initialiser les soldes
        this.tokenBalances = {};
        
        // Recharger les soldes si wallet connect√©
        if (this.walletConnected) {
            setTimeout(() => {
                this.loadTokenBalances();
            }, 1000); // Petit d√©lai pour laisser le r√©seau se stabiliser
        }
    }

    // ===== INITIALIZATION =====
    updateUI() {
        this.updateDashboardStats();
        this.generateArbitrageOpportunities();
        this.updateStrategyMetrics();
    }

    updateStrategyMetrics() {
        console.log('üìä Mise √† jour des m√©triques pour:', this.activeStrategy);
        
        switch(this.activeStrategy) {
            case 'aave':
                this.updateAaveMetrics();
                break;
            case 'flashloan':
                // Pas de m√©triques sp√©cifiques pour flashloan
                break;
            default:
                console.log('Strat√©gie inconnue:', this.activeStrategy);
        }
    }

    // ===== EVENT LISTENERS SETUP =====
    setupEventListeners() {
        // Connexion wallet
        const walletBtn = document.getElementById('connectWallet');
        if (walletBtn) {
            walletBtn.addEventListener('click', () => {
                this.connectWallet();
            });
        }

        // S√©lection du r√©seau
        const networkSelect = document.getElementById('networkSelect');
        if (networkSelect) {
            networkSelect.addEventListener('change', (e) => {
                this.switchNetwork(e.target.value);
            });
        }

        // Onglets de strat√©gie
        document.querySelectorAll('.tab-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const strategy = e.currentTarget.dataset.strategy;
                this.switchStrategy(strategy);
            });
        });

        // Bouton d'actualisation des donn√©es
        const refreshDataBtn = document.getElementById('refreshDataBtn');
        if (refreshDataBtn) {
            refreshDataBtn.addEventListener('click', () => {
                this.refreshAllData();
            });
        }

        // Bouton sp√©cifique pour Aave
        const refreshAaveBtn = document.getElementById('refreshAaveBtn');
        if (refreshAaveBtn) {
            refreshAaveBtn.addEventListener('click', () => {
                console.log('üñ±Ô∏è Bouton "R√©cup√©rer positions Aave" cliqu√©');
                this.loadAavePositions();
            });
        }

        // Boutons de d√©ploiement de strat√©gie
        const aaveBtn = document.querySelector('#aave-strategy .strategy-btn');
        if (aaveBtn) {
            aaveBtn.addEventListener('click', () => {
                this.deployAaveStrategy();
            });
        }

        const flashloanBtn = document.querySelector('#flashloan-strategy .strategy-btn');
        if (flashloanBtn) {
            flashloanBtn.addEventListener('click', () => {
                const flashAmount = document.getElementById('flashAmount')?.value;
                if (flashAmount && parseFloat(flashAmount) > 0) {
                    this.executeFlashLoan('manual');
                } else {
                    alert('Veuillez entrer un montant valide pour le Flash Loan');
                }
            });
        }

        // Fermeture du modal en cliquant √† l'ext√©rieur
        const loadingModal = document.getElementById('loadingModal');
        if (loadingModal) {
            loadingModal.addEventListener('click', (e) => {
                if (e.target === e.currentTarget) {
                    this.hideLoadingModal();
                }
            });
        }

        // Bouton d√©p√¥t Aave
        const aaveDepositBtn = document.getElementById('aaveDepositBtn');
        if (aaveDepositBtn) {
            aaveDepositBtn.addEventListener('click', () => {
                this.deployAaveStrategy();
            });
        }

        // Changement d'asset Aave
        const aaveAssetSelect = document.getElementById('aaveAssetSelect');
        if (aaveAssetSelect) {
            aaveAssetSelect.addEventListener('change', () => {
                console.log('üîÑ Asset Aave chang√©, mise √† jour des m√©triques...');
                // R√©initialiser le montant pour √©viter la confusion
                const amountInput = document.getElementById('aaveAmount');
                if (amountInput && amountInput.value) {
                    // Si il y avait un montant, garder et recalculer
                    this.updateAaveMetrics();
                } else {
                    // Sinon, juste mettre √† jour l'affichage
                    this.updateBalanceDisplay();
                }
            });
        }

        // Changement de montant Aave
        const aaveAmountInput = document.getElementById('aaveAmount');
        if (aaveAmountInput) {
            // Mise √† jour en temps r√©el pendant la frappe
            aaveAmountInput.addEventListener('input', () => {
                console.log('üí± Montant Aave chang√©, recalcul des m√©triques...');
                this.updateAaveMetrics();
            });
            
            // Mise √† jour aussi sur focus out pour √™tre s√ªr
            aaveAmountInput.addEventListener('blur', () => {
                this.updateAaveMetrics();
            });
        }

        console.log('‚úÖ Aave Simple Lending configur√© et pr√™t!');

        // Raccourcis clavier
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                this.hideLoadingModal();
            }
        });

        // √âv√©nements de fen√™tre
        window.addEventListener('load', () => {
            this.checkWalletConnection();
        });

        // √âv√©nements du wallet
        if (window.ethereum) {
            window.ethereum.on('accountsChanged', (accounts) => {
                console.log('üë§ Compte wallet chang√©:', accounts);
                
                if (accounts.length === 0) {
                    this.walletConnected = false;
                    this.currentAccount = null;
                    this.tokenBalances = {}; // R√©initialiser les soldes
                    this.updateWalletUI();
                    this.updateBalanceDisplay(); // Mettre √† jour l'affichage Aave
                } else {
                    this.currentAccount = accounts[0];
                    this.walletConnected = true;
                    this.updateWalletUI();
                    this.loadTokenBalances(); // Charger les nouveaux soldes
                }
            });

            window.ethereum.on('chainChanged', (chainId) => {
                console.log('üåê R√©seau chang√©:', chainId);
                const currentChainId = parseInt(chainId, 16);
                
                if (currentChainId === POLYGON_CHAIN_ID) {
                    document.getElementById('networkSelect').value = 'polygon';
                    this.currentNetwork = 'polygon';
                } else {
                    // Mettre √† jour le s√©lecteur de r√©seau si possible
                    switch(currentChainId) {
                        case 1:
                            document.getElementById('networkSelect').value = 'ethereum';
                            this.currentNetwork = 'ethereum';
                            break;
                        case 56:
                            document.getElementById('networkSelect').value = 'bsc';
                            this.currentNetwork = 'bsc';
                            break;
                        case 42161:
                            document.getElementById('networkSelect').value = 'arbitrum';
                            this.currentNetwork = 'arbitrum';
                            break;
                    }
                }
                
                // Appeler la fonction de gestion du changement de r√©seau
                this.handleNetworkChange();
            });
        }
    }

    // Fonction pour r√©cup√©rer les positions Aave r√©elles depuis la blockchain
    async loadAavePositions() {
    console.log('üì¢ Fonction loadAavePositions() appel√©e');

    if (!this.walletConnected) {
        console.log('‚ùå Wallet non connect√©');
        this.showNotification('Veuillez connecter votre wallet', 'warning');
        return;
    }

    try {
        const provider = new ethers.BrowserProvider(window.ethereum);
        
        // V√©rifier qu'on est sur Polygon
        const network = await provider.getNetwork();
        const currentChainId = Number(network.chainId);
        console.log('üåê R√©seau actuel:', currentChainId, 'Polygon ID attendu:', POLYGON_CHAIN_ID);

        if (currentChainId !== POLYGON_CHAIN_ID) {
            console.log('‚ö†Ô∏è Mauvais r√©seau, attendu:', POLYGON_CHAIN_ID, 'actuel:', currentChainId);
            this.showNotification('‚ö†Ô∏è Changez vers le r√©seau Polygon', 'warning');
            return;
        }

        this.showNotification('üîÑ R√©cup√©ration des positions Aave...', 'info');
        console.log('üîç Recherche des positions Aave pour:', this.currentAccount);
        
        // ABI pour getUserAccountData
        const AAVE_POOL_ABI = [
            "function getUserAccountData(address user) external view returns (uint256 totalCollateralBase, uint256 totalDebtBase, uint256 availableBorrowsBase, uint256 currentLiquidationThreshold, uint256 ltv, uint256 healthFactor)"
        ];
        
        // ABI pour r√©cup√©rer le taux d'int√©r√™t actuel (pour r√©f√©rence)
        const AAVE_DATA_PROVIDER_ABI = [
            "function getReserveData(address asset) external view returns (tuple(uint256 unbacked, uint256 accruedToTreasuryScaled, uint256 totalAToken, uint256 totalStableDebt, uint256 totalVariableDebt, uint256 liquidityRate, uint256 variableBorrowRate, uint256 stableBorrowRate, uint256 lastUpdateTimestamp, address aTokenAddress, address stableDebtTokenAddress, address variableDebtTokenAddress, address interestRateStrategyAddress, uint8 id))"
        ];
        
        console.log('üîÑ Adresse du Pool Aave V3:', AAVE_V3_POLYGON.POOL);
        const aavePool = new ethers.Contract(AAVE_V3_POLYGON.POOL, AAVE_POOL_ABI, provider);
        
        // R√©cup√©rer les donn√©es du compte
        console.log('üì° Appel √† getUserAccountData pour:', this.currentAccount);
        const accountData = await aavePool.getUserAccountData(this.currentAccount);
        console.log('‚úÖ R√©ponse re√ßue de getUserAccountData');
            
        console.log('üìä Donn√©es du compte Aave:', {
            totalCollateralBase: accountData.totalCollateralBase.toString(),
            totalDebtBase: accountData.totalDebtBase.toString(),
            availableBorrowsBase: accountData.availableBorrowsBase.toString(),
            healthFactor: accountData.healthFactor.toString()
        });
        
        // Convertir en format lisible (base = 8 d√©cimales pour le prix USD)
        const totalCollateralUSD = ethers.formatUnits(accountData.totalCollateralBase, 8);
        const totalDebtUSD = ethers.formatUnits(accountData.totalDebtBase, 8);
        
        console.log('üí∞ Valeurs format√©es:', {
            collateralUSD: totalCollateralUSD,
            debtUSD: totalDebtUSD
        });
        
        if (parseFloat(totalCollateralUSD) === 0) {
            console.log('‚ÑπÔ∏è Aucun collat√©ral trouv√©');
            this.showNotification('‚ÑπÔ∏è Aucune position Aave trouv√©e', 'info');
            return;
        }
        
        // R√©cup√©rer l'historique des d√©p√¥ts depuis le localStorage
        let depositHistory = [];
        try {
            const savedHistory = localStorage.getItem('aaveDepositHistory');
            if (savedHistory) {
                depositHistory = JSON.parse(savedHistory);
                console.log('üìã Historique des d√©p√¥ts charg√©:', depositHistory);
            }
        } catch (error) {
            console.error('‚ùå Erreur lors du chargement de l\'historique des d√©p√¥ts:', error);
            // Initialiser un tableau vide en cas d'erreur
            depositHistory = [];
        }
        
        // Si aucun historique, cr√©er une entr√©e par d√©faut bas√©e sur la valeur actuelle
        if (depositHistory.length === 0) {
            console.log('‚ÑπÔ∏è Aucun historique trouv√©, cr√©ation d\'une entr√©e par d√©faut');
            
            // Supposer que c'est un d√©p√¥t USDC (le plus courant)
            const defaultEntry = {
                id: Date.now(),
                date: new Date().toISOString(),
                asset: 'USDC',
                amount: 50.949, // Valeur par d√©faut bas√©e sur les discussions pr√©c√©dentes
                apy: 3.71,      // APY par d√©faut pour USDC
                txHash: '',     // Hash de transaction inconnu
                notes: 'Position d√©tect√©e automatiquement'
            };
            
            depositHistory.push(defaultEntry);
            
            // Sauvegarder l'historique
            localStorage.setItem('aaveDepositHistory', JSON.stringify(depositHistory));
        }
        
        // Calculer le d√©p√¥t total initial et les gains
        const totalInitialDeposit = depositHistory.reduce((sum, entry) => sum + entry.amount, 0);
        const currentValue = parseFloat(totalCollateralUSD);
        const earnings = currentValue - totalInitialDeposit;
        const earningsPercentage = (earnings / totalInitialDeposit) * 100;
        
        // Essayer de r√©cup√©rer l'APY actuel (utiliser une valeur par d√©faut en cas d'√©chec)
        let currentAPY = 3.71; // Valeur par d√©faut
        
        try {
            // Tenter de r√©cup√©rer l'APY actuel pour USDC
            const dataProviderAddress = "0x69FA688f1Dc47d4B5d8029D5a35FB7a548310654"; // UI Data Provider Aave V3 Polygon
            const dataProvider = new ethers.Contract(dataProviderAddress, AAVE_DATA_PROVIDER_ABI, provider);
            
            // R√©cup√©rer les donn√©es pour USDC
            const reserveData = await dataProvider.getReserveData(AAVE_V3_POLYGON.ASSETS.USDC.address);
            
            // liquidityRate est le taux de d√©p√¥t (APY) en RAY units (1e27)
            const apyRaw = reserveData.liquidityRate;
            currentAPY = parseFloat(ethers.formatUnits(apyRaw, 27)) * 100;
            
            console.log(`üìä Taux APY actuel pour USDC: ${currentAPY.toFixed(2)}%`);
        } catch (error) {
            console.warn('‚ö†Ô∏è Impossible de r√©cup√©rer le taux APY actuel:', error);
            // Continuer avec le taux par d√©faut
        }
        
        // Calculer les projections de rendement bas√©es sur l'APY actuel
        const dailyRate = currentAPY / 365;
        const dailyEarnings = (currentValue * dailyRate / 100).toFixed(6);
        const monthlyEarnings = (currentValue * currentAPY / 100 / 12).toFixed(4);
        const yearlyEarnings = (currentValue * currentAPY / 100).toFixed(2);
        
        // Mettre √† jour l'interface avec les donn√©es
        this.updateAavePositionsWithActions(
            currentValue,
            earnings,
            earningsPercentage,
            currentAPY,
            currentValue.toFixed(6),
            {
                daily: dailyEarnings,
                monthly: monthlyEarnings,
                yearly: yearlyEarnings
            },
            depositHistory
        );
        
        // Afficher un message de succ√®s
        this.showNotification(`‚úÖ Position Aave r√©cup√©r√©e ($${currentValue.toFixed(2)} USD)`, 'success');
        console.log(`‚úÖ Position Aave trouv√©e: $${currentValue.toFixed(2)} USD, Gains: $${earnings.toFixed(4)} (${earningsPercentage.toFixed(4)}%)`);
        
    } catch (error) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration des positions Aave:', error);
        console.error('Message d\'erreur:', error.message);
        
        // Message d'erreur adapt√© selon le type d'erreur
        let userMessage = 'Erreur lors de la r√©cup√©ration des positions';
        
        if (error.message?.includes('user rejected') || error.code === 4001) {
            userMessage = 'Transaction rejet√©e par l\'utilisateur';
        } else if (error.message?.includes('network') || error.message?.includes('chainId')) {
            userMessage = 'Erreur r√©seau. V√©rifiez que vous √™tes sur Polygon';
        } else if (error.message?.includes('contract') || error.message?.includes('Pool')) {
            userMessage = 'Erreur de contrat Aave. Essayez √† nouveau plus tard';
        }
        
        this.showNotification(`‚ùå ${userMessage}`, 'error');
    }
}

    // Fonction pour actualiser toutes les donn√©es
    async refreshAllData() {
        if (!this.walletConnected) {
            this.showNotification('Veuillez connecter votre wallet', 'warning');
            return;
        }
        
        try {
            // D√©sactiver le bouton pendant l'actualisation
            const refreshBtn = document.getElementById('refreshDataBtn');
            if (refreshBtn) {
                refreshBtn.disabled = true;
                refreshBtn.innerHTML = `
                    <i class="fas fa-spinner fa-spin"></i>
                    Actualisation...
                `;
            }
            
            this.showNotification('üîÑ Actualisation de toutes les donn√©es...', 'info');
            
            // 1. Recharger les soldes des tokens
            await this.loadTokenBalances();
            
            // 2. Recharger les positions Aave
            await this.loadAavePositions();
            
            // 3. Mettre √† jour l'affichage
            this.updateBalanceDisplay();
            this.updateAaveMetrics();
            
            this.showNotification('‚úÖ Toutes les donn√©es actualis√©es', 'success');
            
        } catch (error) {
            console.error('‚ùå Erreur lors de l\'actualisation:', error);
            this.showNotification('‚ùå Erreur lors de l\'actualisation', 'error');
        } finally {
            // R√©activer le bouton
            const refreshBtn = document.getElementById('refreshDataBtn');
            if (refreshBtn) {
                refreshBtn.disabled = false;
                refreshBtn.innerHTML = `
                    <i class="fas fa-sync-alt"></i>
                    Actualiser les donn√©es
                `;
            }
        }
    }

    async switchNetwork(networkName) {
        console.log('Tentative de changement vers le r√©seau:', networkName);
        
        const networkConfigs = {
            ethereum: {
                chainId: '0x1',
                chainName: 'Ethereum Mainnet',
                rpcUrls: ['https://mainnet.infura.io/v3/']
            },
            polygon: {
                chainId: '0x89',
                chainName: 'Polygon Mainnet',
                rpcUrls: ['https://polygon-rpc.com/']
            },
            arbitrum: {
                chainId: '0xa4b1',
                chainName: 'Arbitrum One',
                rpcUrls: ['https://arb1.arbitrum.io/rpc']
            },
            bsc: {
                chainId: '0x38',
                chainName: 'Binance Smart Chain',
                rpcUrls: ['https://bsc-dataseed.binance.org/']
            }
        };

        try {
            if (window.ethereum && networkConfigs[networkName]) {
                await window.ethereum.request({
                    method: 'wallet_switchEthereumChain',
                    params: [{ chainId: networkConfigs[networkName].chainId }]
                });
                
                this.currentNetwork = networkName;
                console.log(`Bascul√© sur ${networkName}`);
            }
        } catch (error) {
            console.error('Erreur de changement de r√©seau:', error);
            
            // Si le r√©seau n'est pas configur√©, proposer de l'ajouter
            if (error.code === 4902) {
                try {
                    await window.ethereum.request({
                        method: 'wallet_addEthereumChain',
                        params: [{
                            chainId: networkConfigs[networkName].chainId,
                            chainName: networkConfigs[networkName].chainName,
                            rpcUrls: networkConfigs[networkName].rpcUrls
                        }]
                    });
                } catch (addError) {
                    console.error('Erreur lors de l\'ajout du r√©seau:', addError);
                }
            }
        }
    }

    async checkWalletConnection() {
        console.log('V√©rification de la connexion du wallet...');
        
        if (window.ethereum) {
            try {
                const accounts = await window.ethereum.request({
                    method: 'eth_accounts'
                });
                
                if (accounts.length > 0) {
                    this.currentAccount = accounts[0];
                    this.walletConnected = true;
                    this.updateWalletUI();
                    
                    // V√©rifier le r√©seau actuel
                    const chainId = await window.ethereum.request({ method: 'eth_chainId' });
                    const currentChainId = parseInt(chainId, 16);
                    
                    console.log('R√©seau actuel au chargement:', currentChainId);
                    
                    if (currentChainId === POLYGON_CHAIN_ID) {
                        document.getElementById('networkSelect').value = 'polygon';
                        this.currentNetwork = 'polygon';
                    }
                    
                    this.loadTokenBalances();
                } else {
                    console.log('Aucun compte connect√©');
                }
            } catch (error) {
                console.error('Erreur lors de la v√©rification de la connexion wallet:', error);
            }
        } else {
            console.log('MetaMask non d√©tect√©');
        }
    }

    // ===== NOTIFICATION SYSTEM =====
    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.innerHTML = `
            <div class="notification-content">
                <i class="fas fa-${type === 'success' ? 'check' : type === 'error' ? 'times' : 'info'}-circle"></i>
                <span>${message}</span>
            </div>
            <button class="notification-close" onclick="this.parentElement.remove()">
                <i class="fas fa-times"></i>
            </button>
        `;
        
        document.body.appendChild(notification);
        
        // Suppression automatique apr√®s 5 secondes
        setTimeout(() => {
            if (notification.parentElement) {
                notification.remove();
            }
        }, 5000);
    }
}

// ===== APP INITIALIZATION =====
let app;

document.addEventListener('DOMContentLoaded', () => {
    app = new YieldMaxApp();
});

// ===== GLOBAL HELPER FUNCTIONS =====
function formatNumber(num, decimals = 2) {
    return new Intl.NumberFormat('fr-FR', {
        minimumFractionDigits: decimals,
        maximumFractionDigits: decimals
    }).format(num);
}

function formatCurrency(amount, currency = 'USD') {
    return new Intl.NumberFormat('fr-FR', {
        style: 'currency',
        currency: currency
    }).format(amount);
}

function shortenAddress(address) {
    if (!address) return '';
    return `${address.slice(0, 6)}...${address.slice(-4)}`;
}

function copyToClipboard(text) {
    navigator.clipboard.writeText(text).then(() => {
        if (app) app.showNotification('Copi√© dans le presse-papier!', 'success');
    }).catch(() => {
        if (app) app.showNotification('Erreur lors de la copie', 'error');
    });
}

console.log('üèÅ FIN app.js - Version Aave uniquement');

// ===== ERROR HANDLING =====
window.addEventListener('error', (event) => {
    console.error('Erreur globale:', event.error);
    if (app) app.showNotification('Une erreur est survenue', 'error');
});

window.addEventListener('unhandledrejection', (event) => {
    console.error('Promesse rejet√©e non g√©r√©e:', event.reason);
    if (app) app.showNotification('Erreur de connexion', 'error');
});

// ===== PERFORMANCE MONITORING =====
if ('performance' in window) {
    window.addEventListener('load', () => {
        setTimeout(() => {
            const perfData = performance.timing;
            const loadTime = perfData.loadEventEnd - perfData.navigationStart;
            console.log(`Temps de chargement de la page: ${loadTime}ms`);
        }, 0);
    });
}

document.addEventListener('DOMContentLoaded', () => {
    const refreshAaveBtn = document.getElementById('refreshAaveBtn');
    if (refreshAaveBtn) {
        console.log('Bouton Aave trouv√©, ajout d\'un √©couteur direct');
        refreshAaveBtn.addEventListener('click', function() {
            console.log('Bouton Aave cliqu√© directement');
            if (app && typeof app.loadAavePositions === 'function') {
                app.loadAavePositions();
            } else {
                console.error('app.loadAavePositions n\'est pas disponible');
            }
        });
    } else {
        console.error('Bouton refreshAaveBtn non trouv√© dans le DOM');
    }
});