
// scripts/deploy.js
const { ethers } = require("hardhat");

async function main() {
    console.log("üöÄ D√©ploiement de YieldMax Uniswap V3 Strategy...");

    // Get deployment account
    const [deployer] = await ethers.getSigners();
    console.log("üìù D√©ploiement avec le compte:", deployer.address);
    console.log("üí∞ Solde du compte:", ethers.formatEther(await ethers.provider.getBalance(deployer.address)));

    // Adresses Mainnet Ethereum
    const UNISWAP_V3_POSITION_MANAGER = "0xC36442b4a4522E871399CD717aBDD847Ab11FE88";
    const UNISWAP_V3_SWAP_ROUTER = "0xE592427A0AEce92De3Edee1F18E0157C05861564";
    const FEE_RECIPIENT = deployer.address; // Pour les tests

    // D√©ployer le contrat principal
    console.log("\nüì¶ D√©ploiement du contrat YieldMaxUniswapV3Strategy...");
    
    const YieldMaxUniswapV3Strategy = await ethers.getContractFactory("YieldMaxUniswapV3Strategy");
    const strategy = await YieldMaxUniswapV3Strategy.deploy(
    UNISWAP_V3_POSITION_MANAGER,
    UNISWAP_V3_SWAP_ROUTER,
    FEE_RECIPIENT
);

await strategy.waitForDeployment();
console.log("‚úÖ YieldMaxUniswapV3Strategy d√©ploy√© √†:", await strategy.getAddress());

    // Attendre quelques confirmations
    console.log("‚è≥ Attente de confirmations...");
    const receipt = await strategy.deploymentTransaction();
    if (receipt) {
        await receipt.wait(5);
    }

    // Afficher les informations de d√©ploiement
    console.log("\nüìä Informations de d√©ploiement:");
    console.log("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê");
    console.log("‚îÇ Contrat: YieldMaxUniswapV3Strategy                      ‚îÇ");
    console.log(`‚îÇ Adresse: ${strategy.address}                    ‚îÇ`);
    console.log(`‚îÇ R√©seau:  ${network.name}                                ‚îÇ`);
    console.log(`‚îÇ Gas utilis√©: ${strategy.deployTransaction.gasUsed}      ‚îÇ`);
    console.log("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò");

    // Configuration initiale
    console.log("\n‚öôÔ∏è  Configuration initiale...");
    
    // V√©rifier que les param√®tres sont corrects
    const positionManager = await strategy.positionManager();
    const swapRouter = await strategy.swapRouter();
    const feeRecipient = await strategy.feeRecipient();
    const performanceFee = await strategy.performanceFee();

    console.log("‚úÖ Position Manager:", positionManager);
    console.log("‚úÖ Swap Router:", swapRouter);
    console.log("‚úÖ Fee Recipient:", feeRecipient);
    console.log("‚úÖ Performance Fee:", performanceFee.toString(), "bp (", performanceFee.div(100).toString(), "%)");

    // Sauvegarder les addresses de d√©ploiement
    const deploymentInfo = {
        network: network.name,
        YieldMaxUniswapV3Strategy: strategy.address,
        deployer: deployer.address,
        timestamp: new Date().toISOString(),
        transactionHash: strategy.deployTransaction.hash,
        gasUsed: strategy.deployTransaction.gasUsed.toString()
    };

    console.log("\nüíæ Sauvegarde des informations de d√©ploiement...");
    const fs = require("fs");
    fs.writeFileSync(
        `./deployments/${network.name}_deployment.json`,
        JSON.stringify(deploymentInfo, null, 2)
    );

    console.log("\nüéâ D√©ploiement termin√© avec succ√®s!");
    console.log("\nüìã Prochaines √©tapes:");
    console.log("1. V√©rifier le contrat sur Etherscan");
    console.log("2. Configurer le frontend avec la nouvelle adresse");
    console.log("3. Tester les fonctions principales");
    console.log("4. Configurer l'automation Chainlink (optionnel)");

    return {
        strategy: strategy.address,
        deployer: deployer.address
    };
}

// Script de v√©rification Etherscan
async function verify(contractAddress, constructorArguments) {
    console.log("üîç V√©rification sur Etherscan...");
    
    try {
        await hre.run("verify:verify", {
            address: contractAddress,
            constructorArguments: constructorArguments
        });
        console.log("‚úÖ Contrat v√©rifi√© sur Etherscan");
    } catch (error) {
        console.log("‚ùå Erreur de v√©rification:", error.message);
    }
}

// Tests d'int√©gration
async function runIntegrationTests(strategyAddress) {
    console.log("\nüß™ Ex√©cution des tests d'int√©gration...");
    
    const strategy = await ethers.getContractAt("YieldMaxUniswapV3Strategy", strategyAddress);
    const [deployer, user1] = await ethers.getSigners();

    // Test des constantes
    console.log("üìã Test des constantes...");
    const WETH = await strategy.WETH();
    const USDC = await strategy.USDC();
    const DEFAULT_FEE = await strategy.DEFAULT_FEE();
    
    console.log("  WETH:", WETH);
    console.log("  USDC:", USDC);
    console.log("  DEFAULT_FEE:", DEFAULT_FEE.toString());

    // Test des fonctions view
    console.log("üìä Test des fonctions view...");
    const globalStats = await strategy.getGlobalStats();
    console.log("  Total positions:", globalStats.totalActivePositions.toString());
    console.log("  Total TVL:", globalStats.totalValueLocked.toString());

    // Test de cr√©ation de position (simulation)
    console.log("üîÑ Test de simulation de position...");
    try {
        const estimation = await strategy.estimateRewards(
            WETH,
            USDC,
            3000,
            -887220, // tickLower
            887220,  // tickUpper
            ethers.utils.parseEther("1"), // 1 ETH
            ethers.utils.parseUnits("2000", 6) // 2000 USDC
        );
        console.log("  Fees journaliers estim√©s:", estimation.estimatedDailyFees.toString());
        console.log("  APR estim√©:", estimation.estimatedAPR.toString());
    } catch (error) {
        console.log("  ‚ö†Ô∏è  Estimation non disponible (normal en testnet)");
    }

    console.log("‚úÖ Tests d'int√©gration termin√©s");
}

// Script principal avec options
async function deployWithOptions() {
    const args = process.argv.slice(2);
    const shouldVerify = args.includes("--verify");
    const shouldTest = args.includes("--test");
    const networkName = args.find(arg => arg.startsWith("--network="))?.split("=")[1];

    console.log("üéØ Options de d√©ploiement:");
    console.log("  V√©rification:", shouldVerify ? "‚úÖ" : "‚ùå");
    console.log("  Tests:", shouldTest ? "‚úÖ" : "‚ùå");
    console.log("  R√©seau:", networkName || "default");

    // D√©ploiement principal
    const deployment = await main();

    // V√©rification optionnelle
    if (shouldVerify) {
        const UNISWAP_V3_POSITION_MANAGER = "0xC36442b4a4522E871399CD717aBDD847Ab11FE88";
        const UNISWAP_V3_SWAP_ROUTER = "0xE592427A0AEce92De3Edee1F18E0157C05861564";
        const FEE_RECIPIENT = deployment.deployer;
        
        await verify(deployment.strategy, [
            UNISWAP_V3_POSITION_MANAGER,
            UNISWAP_V3_SWAP_ROUTER,
            FEE_RECIPIENT
        ]);
    }

    // Tests optionnels
    if (shouldTest) {
        await runIntegrationTests(deployment.strategy);
    }

    return deployment;
}

// Export pour utilisation dans d'autres scripts
module.exports = {
    main,
    verify,
    runIntegrationTests,
    deployWithOptions
};

// Ex√©cution si appel√© directement
if (require.main === module) {
    deployWithOptions()
        .then(() => process.exit(0))
        .catch((error) => {
            console.error("‚ùå Erreur de d√©ploiement:", error);
            process.exit(1);
        });
}